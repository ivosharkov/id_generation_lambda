AWSTemplateFormatVersion: 2010-09-09
Description: >
  AWS CloudFormation template to create a new VPC or use an existing VPC for ECS
  deployment in Create Cluster Wizard. Requires exactly 1 Instance Types for a
  Spot Request.
Parameters:
  EcsClusterName:
    Type: String
    Description: >
      Specifies the ECS Cluster Name with which the resources would be
      associated
    Default: default
  EcsAmiId:
    Type: String
    Description: Specifies the AMI ID for your container instances.
  EcsInstanceType:
    Type: CommaDelimitedList
    Description: >
      Specifies the EC2 instance type for your container instances. Defaults to
      m4.large
    Default: m4.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Type: String
    Description: >
      Optional - Specifies the name of an existing Amazon EC2 key pair to enable
      SSH access to the EC2 instances in your cluster.
    Default: ''
  VpcId:
    Type: String
    Description: >
      Optional - Specifies the ID of an existing VPC in which to launch your
      container instances. If you specify a VPC ID, you must specify a list of
      existing subnets in that VPC. If you do not specify a VPC ID, a new VPC is
      created with atleast 1 subnet.
    Default: ''
    AllowedPattern: '^(?:vpc-[0-9a-f]{8}|)$'
    ConstraintDescription: |
      VPC Id must begin with 'vpc-' or leave blank to have a new VPC created
  SubnetIds:
    Type: CommaDelimitedList
    Description: >
      Optional - Specifies the Comma separated list of existing VPC Subnet Ids
      where ECS instances will run
    Default: ''
  SecurityGroupId:
    Type: String
    Description: >
      Optional - Specifies the Security Group Id of an existing Security Group.
      Leave blank to have a new Security Group created
    Default: ''
  VpcCidr:
    Type: String
    Description: Optional - Specifies the CIDR Block of VPC
    Default: ''
  SubnetCidr1:
    Type: String
    Description: Specifies the CIDR Block of Subnet 1
    Default: ''
  SubnetCidr2:
    Type: String
    Description: Specifies the CIDR Block of Subnet 2
    Default: ''
  SubnetCidr3:
    Type: String
    Description: Specifies the CIDR Block of Subnet 3
    Default: ''
  AsgMaxSize:
    Type: Number
    Description: >
      Specifies the number of instances to launch and register to the cluster.
      Defaults to 1.
    Default: '1'
  IamRoleInstanceProfile:
    Type: String
    Description: >
      Specifies the Name or the Amazon Resource Name (ARN) of the instance
      profile associated with the IAM role for the instance
  SecurityIngressFromPort:
    Type: Number
    Description: >
      Optional - Specifies the Start of Security Group port to open on ECS
      instances - defaults to port 0
    Default: '0'
  SecurityIngressToPort:
    Type: Number
    Description: >
      Optional - Specifies the End of Security Group port to open on ECS
      instances - defaults to port 65535
    Default: '65535'
  SecurityIngressCidrIp:
    Type: String
    Description: >
      Optional - Specifies the CIDR/IP range for Security Ports - defaults to
      0.0.0.0/0
    Default: 0.0.0.0/0
  EcsEndpoint:
    Type: String
    Description: |
      Optional - Specifies the ECS Endpoint for the ECS Agent to connect to
    Default: ''
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: >
      Specifies a comma-separated list of 3 VPC Availability Zones for the
      creation of new subnets. These zones must have the available status.
    Default: ''
  EbsVolumeSize:
    Type: Number
    Description: >
      Optional - Specifies the Size in GBs, of the newly created Amazon Elastic
      Block Store (Amazon EBS) volume
    Default: '0'
  EbsVolumeType:
    Type: String
    Description: Optional - Specifies the Type of (Amazon EBS) volume
    Default: ''
    AllowedValues:
      - ''
      - standard
      - io1
      - gp2
      - sc1
      - st1
    ConstraintDescription: Must be a valid EC2 volume type.
  DeviceName:
    Type: String
    Description: Optional - Specifies the device mapping for the Volume
    Default: ''
  UseSpot:
    Type: String
    Default: 'false'
  IamSpotFleetRoleName:
    Type: String
    Default: ''
  SpotPrice:
    Type: Number
    Default: '0'
  SpotAllocationStrategy:
    Type: String
    Default: diversified
    AllowedValues:
      - lowestPrice
      - diversified
Conditions:
  CreateEC2LCWithKeyPair: !Not 
    - !Equals 
      - !Ref KeyName
      - ''
  SetEndpointToECSAgent: !Not 
    - !Equals 
      - !Ref EcsEndpoint
      - ''
  CreateNewSecurityGroup: !Equals 
    - !Ref SecurityGroupId
    - ''
  CreateNewVpc: !Equals 
    - !Ref VpcId
    - ''
  CreateSubnet1: !And 
    - !Not 
      - !Equals 
        - !Ref SubnetCidr1
        - ''
    - !Condition CreateNewVpc
  CreateSubnet2: !And 
    - !Not 
      - !Equals 
        - !Ref SubnetCidr2
        - ''
    - !Condition CreateSubnet1
  CreateSubnet3: !And 
    - !Not 
      - !Equals 
        - !Ref SubnetCidr3
        - ''
    - !Condition CreateSubnet2
  CreateEbsVolume: !And 
    - !Not 
      - !Equals 
        - !Ref EbsVolumeSize
        - '0'
    - !Not 
      - !Equals 
        - !Ref EbsVolumeType
        - ''
    - !Not 
      - !Equals 
        - !Ref DeviceName
        - ''
  CreateWithSpot: !Equals 
    - !Ref UseSpot
    - 'true'
  CreateWithASG: !Not 
    - !Condition CreateWithSpot
Resources:
  Vpc:
    Condition: CreateSubnet1
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: adb65917-bd75-4e4b-a6c2-f8ea2b0a4443
  PubSubnetAz1:
    Condition: CreateSubnet1
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr1
      AvailabilityZone: !Select 
        - 0
        - !Ref VpcAvailabilityZones
      MapPublicIpOnLaunch: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a406d51b-d7b3-4deb-a28d-905fb9c5cced
  PubSubnetAz2:
    Condition: CreateSubnet2
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr2
      AvailabilityZone: !Select 
        - 1
        - !Ref VpcAvailabilityZones
      MapPublicIpOnLaunch: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a6f9d984-7363-42ad-bbc4-a951cf19d8c5
  PubSubnetAz3:
    Condition: CreateSubnet3
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr3
      AvailabilityZone: !Select 
        - 2
        - !Ref VpcAvailabilityZones
      MapPublicIpOnLaunch: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 33bee236-7b23-47a1-bfb9-6dddc288ce0b
  InternetGateway:
    Condition: CreateSubnet1
    Type: 'AWS::EC2::InternetGateway'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 906e140c-4a32-4d44-81b7-7e6a9896241c
  AttachGateway:
    Condition: CreateSubnet1
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 88f24563-5155-404e-bec5-a072073d5473
  RouteViaIgw:
    Condition: CreateSubnet1
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2bf0453b-abd3-4694-81d7-e22b2e30bd90
  PublicRouteViaIgw:
    Condition: CreateSubnet1
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9382dcca-4817-42cf-b7f8-06536e281f0f
  PubSubnet1RouteTableAssociation:
    Condition: CreateSubnet1
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e28f0f92-bd4b-40a1-bbd2-ec82a46b11f4
  PubSubnet2RouteTableAssociation:
    Condition: CreateSubnet2
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw
    Metadata:
      'AWS::CloudFormation::Designer':
        id: df9cfdc2-2cf3-46e0-8709-954b55b436a5
  PubSubnet3RouteTableAssociation:
    Condition: CreateSubnet3
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz3
      RouteTableId: !Ref RouteViaIgw
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 77ec08aa-404d-4576-8ada-e74f44ecca69
  EcsSecurityGroup:
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !If 
        - CreateSubnet1
        - !Ref Vpc
        - !Ref VpcId
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: !Ref SecurityIngressFromPort
        ToPort: !Ref SecurityIngressToPort
        CidrIp: !Ref SecurityIngressCidrIp
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c26f4fe5-0ea6-409c-9866-d553d6bbb52a
  EcsInstanceLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Condition: CreateWithASG
    Properties:
      ImageId: !Ref EcsAmiId
      InstanceType: !Select 
        - 0
        - !Ref EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref IamRoleInstanceProfile
      KeyName: !If 
        - CreateEC2LCWithKeyPair
        - !Ref KeyName
        - !Ref 'AWS::NoValue'
      SecurityGroups:
        - !If 
          - CreateNewSecurityGroup
          - !Ref EcsSecurityGroup
          - !Ref SecurityGroupId
      BlockDeviceMappings: !If 
        - CreateEbsVolume
        - - DeviceName: !Ref DeviceName
            Ebs:
              VolumeSize: !Ref EbsVolumeSize
              VolumeType: !Ref EbsVolumeType
        - !Ref 'AWS::NoValue'
      UserData: !If 
        - SetEndpointToECSAgent
        - !Base64 
          'Fn::Sub': |
            #!/bin/bash
            echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config
            echo ECS_BACKEND_HOST=${EcsEndpoint} >> /etc/ecs/ecs.config
        - !Base64 
          'Fn::Sub': |
            #!/bin/bash
            echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a1e1aa06-84f0-4430-ae7f-b1cc9b76ae4b
  EcsInstanceAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Condition: CreateWithASG
    Properties:
      VPCZoneIdentifier: !If 
        - CreateSubnet1
        - !If 
          - CreateSubnet2
          - !If 
            - CreateSubnet3
            - - !Sub '${PubSubnetAz1}, ${PubSubnetAz2}, ${PubSubnetAz3}'
            - - !Sub '${PubSubnetAz1}, ${PubSubnetAz2}'
          - - !Sub '${PubSubnetAz1}'
        - !Ref SubnetIds
      LaunchConfigurationName: !Ref EcsInstanceLc
      MinSize: '0'
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: !Ref AsgMaxSize
      Tags:
        - Key: Name
          Value: !Sub 'ECS Instance - ${AWS::StackName}'
          PropagateAtLaunch: 'true'
        - Key: Description
          Value: >-
            This instance is the part of the Auto Scaling group which was
            created through ECS Console
          PropagateAtLaunch: 'true'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 4c6b43d4-a468-48a8-a0b4-05d31d3d7d9f
  EcsSpotFleet:
    Condition: CreateWithSpot
    Type: 'AWS::EC2::SpotFleet'
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: !Ref SpotAllocationStrategy
        IamFleetRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${IamSpotFleetRoleName}'
        TargetCapacity: !Ref AsgMaxSize
        SpotPrice: !Ref SpotPrice
        TerminateInstancesWithExpiration: true
        LaunchSpecifications:
          - IamInstanceProfile:
              Arn: !Sub >-
                arn:aws:iam::${AWS::AccountId}:instance-profile/${IamRoleInstanceProfile}
            ImageId: !Ref EcsAmiId
            InstanceType: !Select 
              - 0
              - !Ref EcsInstanceType
            KeyName: !If 
              - CreateEC2LCWithKeyPair
              - !Ref KeyName
              - !Ref 'AWS::NoValue'
            Monitoring:
              Enabled: true
            SecurityGroups:
              - GroupId: !If 
                  - CreateNewSecurityGroup
                  - !Ref EcsSecurityGroup
                  - !Ref SecurityGroupId
            SubnetId: !If 
              - CreateSubnet1
              - !If 
                - CreateSubnet2
                - !If 
                  - CreateSubnet3
                  - !Join 
                    - ','
                    - - !Ref PubSubnetAz1
                      - !Ref PubSubnetAz2
                      - !Ref PubSubnetAz3
                  - !Join 
                    - ','
                    - - !Ref PubSubnetAz1
                      - !Ref PubSubnetAz2
                - !Ref PubSubnetAz1
              - !Join 
                - ','
                - !Ref SubnetIds
            BlockDeviceMappings: !If 
              - CreateEbsVolume
              - - DeviceName: !Ref DeviceName
                  Ebs:
                    VolumeSize: !Ref EbsVolumeSize
                    VolumeType: !Ref EbsVolumeType
                    DeleteOnTermination: true
              - !Ref 'AWS::NoValue'
            UserData: !Base64 
              'Fn::Sub': >
                #!/bin/bash

                echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config

                if [ "${EcsEndpoint}" != "" ]; then
                  echo ECS_BACKEND_HOST=${EcsEndpoint} >> /etc/ecs/ecs.config
                fi

                export PATH=/usr/local/bin:$PATH

                yum -y install jq

                yum install -y nfs-utils

                mkdir -p /opt/sfly

                chown -R 1000:1000 /opt/sfly

                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 fs-cf9e4b06.efs.eu-west-1.amazonaws.com:/ /opt/sfly
                
                easy_install pip

                pip install awscli

                aws configure set default.region ${AWS::Region}

                cat <<EOF >
                /etc/init/spot-instance-termination-notice-handler.conf

                description "Start spot instance termination handler monitoring
                script"

                author "Amazon Web Services"

                start on started ecs

                script

                echo $$ > /var/run/spot-instance-termination-notice-handler.pid

                exec /usr/local/bin/spot-instance-termination-notice-handler.sh

                end script

                pre-start script

                logger "[spot-instance-termination-notice-handler.sh]: spot
                instance termination

                notice handler started"

                end script

                EOF

                cat <<EOF >
                /usr/local/bin/spot-instance-termination-notice-handler.sh

                #!/bin/bash

                while sleep 5; do

                if [ -z \$(curl -Isf
                http://169.254.169.254/latest/meta-data/spot/termination-time)];
                then

                /bin/false

                else

                logger "[spot-instance-termination-notice-handler.sh]: spot
                instance termination notice detected"

                STATUS=DRAINING

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq
                .Cluster | tr -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata
                | jq .ContainerInstanceArn | tr -d \")

                logger "[spot-instance-termination-notice-handler.sh]: putting
                instance in state \$STATUS"


                if [ "${EcsEndpoint}" != "" ]; then
                    /usr/local/bin/aws --endpoint-url https://${EcsEndpoint} ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS
                else
                    /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS
                fi


                logger "[spot-instance-termination-notice-handler.sh]: putting
                myself to sleep..."

                sleep 120 # exit loop as instance expires in 120 secs after
                terminating notification

                fi

                done

                EOF

                chmod +x
                /usr/local/bin/spot-instance-termination-notice-handler.sh
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 41573fc1-0f86-48c8-b7fc-fb1b87173bc0
Outputs:
  EcsInstanceAsgName:
    Condition: CreateWithASG
    Description: Auto Scaling Group Name for ECS Instances
    Value: !Ref EcsInstanceAsg
  EcsSpotFleetRequestId:
    Condition: CreateWithSpot
    Description: Spot Fleet Request for ECS Instances
    Value: !Ref EcsSpotFleet
  UsedByECSCreateCluster:
    Description: Flag used by EC2 Container Service Create Cluster Wizard
    Value: 'true'
  TemplateVersion:
    Description: The version of the template used by Create Cluster Wizard
    Value: 1.0.0
Metadata:
  'AWS::CloudFormation::Designer':
    906e140c-4a32-4d44-81b7-7e6a9896241c:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 750
      z: 1
      embeds: []
    adb65917-bd75-4e4b-a6c2-f8ea2b0a4443:
      size:
        width: 690
        height: 600
      position:
        x: -420
        'y': -170
      z: 1
      embeds:
        - c26f4fe5-0ea6-409c-9866-d553d6bbb52a
        - 2bf0453b-abd3-4694-81d7-e22b2e30bd90
        - 33bee236-7b23-47a1-bfb9-6dddc288ce0b
        - a6f9d984-7363-42ad-bbc4-a951cf19d8c5
        - a406d51b-d7b3-4deb-a28d-905fb9c5cced
    c26f4fe5-0ea6-409c-9866-d553d6bbb52a:
      size:
        width: 60
        height: 60
      position:
        x: 120
        'y': -110
      z: 2
      parent: adb65917-bd75-4e4b-a6c2-f8ea2b0a4443
      embeds: []
    a1e1aa06-84f0-4430-ae7f-b1cc9b76ae4b:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 750
      z: 1
      embeds: []
      isrelatedto:
        - c26f4fe5-0ea6-409c-9866-d553d6bbb52a
    4c6b43d4-a468-48a8-a0b4-05d31d3d7d9f:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 750
      z: 1
      embeds: []
      isassociatedwith:
        - a1e1aa06-84f0-4430-ae7f-b1cc9b76ae4b
    2bf0453b-abd3-4694-81d7-e22b2e30bd90:
      size:
        width: 240
        height: 240
      position:
        x: -390
        'y': -110
      z: 2
      parent: adb65917-bd75-4e4b-a6c2-f8ea2b0a4443
      embeds:
        - 9382dcca-4817-42cf-b7f8-06536e281f0f
    88f24563-5155-404e-bec5-a072073d5473:
      source:
        id: 906e140c-4a32-4d44-81b7-7e6a9896241c
      target:
        id: adb65917-bd75-4e4b-a6c2-f8ea2b0a4443
    9382dcca-4817-42cf-b7f8-06536e281f0f:
      size:
        width: 60
        height: 60
      position:
        x: -360
        'y': -50
      z: 3
      parent: 2bf0453b-abd3-4694-81d7-e22b2e30bd90
      embeds: []
      references:
        - 906e140c-4a32-4d44-81b7-7e6a9896241c
      dependson:
        - 88f24563-5155-404e-bec5-a072073d5473
    33bee236-7b23-47a1-bfb9-6dddc288ce0b:
      size:
        width: 150
        height: 150
      position:
        x: -390
        'y': 190
      z: 2
      parent: adb65917-bd75-4e4b-a6c2-f8ea2b0a4443
      embeds: []
    77ec08aa-404d-4576-8ada-e74f44ecca69:
      source:
        id: 2bf0453b-abd3-4694-81d7-e22b2e30bd90
      target:
        id: 33bee236-7b23-47a1-bfb9-6dddc288ce0b
    a6f9d984-7363-42ad-bbc4-a951cf19d8c5:
      size:
        width: 150
        height: 150
      position:
        x: -90
        'y': 100
      z: 2
      parent: adb65917-bd75-4e4b-a6c2-f8ea2b0a4443
      embeds: []
    df9cfdc2-2cf3-46e0-8709-954b55b436a5:
      source:
        id: 2bf0453b-abd3-4694-81d7-e22b2e30bd90
      target:
        id: a6f9d984-7363-42ad-bbc4-a951cf19d8c5
    a406d51b-d7b3-4deb-a28d-905fb9c5cced:
      size:
        width: 150
        height: 150
      position:
        x: -90
        'y': -110
      z: 2
      parent: adb65917-bd75-4e4b-a6c2-f8ea2b0a4443
      embeds: []
    41573fc1-0f86-48c8-b7fc-fb1b87173bc0:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 750
      z: 1
      embeds: []
      isrelatedto:
        - c26f4fe5-0ea6-409c-9866-d553d6bbb52a
        - a406d51b-d7b3-4deb-a28d-905fb9c5cced
        - a6f9d984-7363-42ad-bbc4-a951cf19d8c5
        - 33bee236-7b23-47a1-bfb9-6dddc288ce0b
    e28f0f92-bd4b-40a1-bbd2-ec82a46b11f4:
      source:
        id: 2bf0453b-abd3-4694-81d7-e22b2e30bd90
      target:
        id: a406d51b-d7b3-4deb-a28d-905fb9c5cced
